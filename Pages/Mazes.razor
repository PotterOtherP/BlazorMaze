@page "/Mazes"

@inject IJSRuntime JS;
@inject IConfiguration Configuration;

@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Configuration;
@using BlazorMaze.Components;


@if (ModelList == null)
{
    <p><em>Loading...</em></p>
}

else
{
    SavedMazeCount = ModelList.Count;
    <p><h4>There are @SavedMazeCount mazes that have been saved to the database.</h4></p>
    <p>Click on the color inputs to change the maze colors! Changes are automatically saved.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Wall color</th>
                <th>Background color</th>
                <th>Preview - Click to view!</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var maze in ModelList.Reverse())
            {
                <MazeTableRow
                MazeId=@maze.Id
                Complexity=@maze.Complexity
                WallColorString=@maze.WallColorString
                SpaceColorString=@maze.SpaceColorString
                GridString=@maze.GridString
                OnClickCallback="@OnInitializedAsync"
                />
            }
        </tbody>
    </table>
}

@code {

    private IList<MazeModel> ModelList;
    private int SavedMazeCount;

    private MazeContext getNewContext() {

        var connectionString = Configuration.GetConnectionString("SQLCONNSTR_nstsqldb_connstr");

        var contextOptions = new DbContextOptionsBuilder<MazeContext>()
            .UseSqlServer(connectionString)
            .Options;

        return new MazeContext(contextOptions);

    }

    protected override async Task OnInitializedAsync()
    {
        
        // await JS.InvokeVoidAsync("terminateRace");
        
        using (var context = getNewContext())
        {
            try {
                ModelList = await context.MazeModels.ToListAsync();

            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("ConsoleLog", ex.Message);
            }
            
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {

        await JS.InvokeVoidAsync("terminateRace");

    }

    

}
