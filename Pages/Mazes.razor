@page "/Mazes"

@* @using BlazorServerExample.Data *@
@* @inject WeatherForecastService ForecastService *@

@inject IJSRuntime JS;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration Configuration;

<h1>Mazes in Database</h1>

<p>These are the mazes which users have saved to the database.</p>

@if (ModelList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Wall color</th>
                <th>Space color</th>
                <th>Grid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var maze in ModelList)
            {
                <tr>
                    <td>@maze.WallColorString</td>
                    <td>@maze.SpaceColorString</td>
                    <td>@maze.GridString</td>
                    @* <td>@maze.GridString.Substring(0, 10)</td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IList<MazeModel> ModelList;

    protected override async Task OnInitializedAsync()
    {
        var connectionString = Configuration.GetConnectionString("SQLCONNSTR_nstsqldb_connstr");

        var contextOptions = new DbContextOptionsBuilder<MazeContext>()
            .UseSqlServer(connectionString)
            .Options;

        using (var context = new MazeContext(contextOptions))
        {
            try {
                ModelList = await context.MazeModels.ToListAsync();

            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("ConsoleLog", ex.Message);
            }
            
        }
    }
}
