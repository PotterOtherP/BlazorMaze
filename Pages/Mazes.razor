@page "/Mazes"

@inject IJSRuntime JS;
@inject IConfiguration Configuration;

@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Configuration;
@using BlazorMaze.Components;

<h1>Mazes in Database</h1>

<p>These are the mazes which users have saved to the database.</p>

@if (ModelList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Wall color</th>
                <th>Space color</th>
                <th>Grid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var maze in ModelList)
            {
                <tr>
                    <td><input type="color" value=@maze.WallColorString></td>
                    <td><input type="color" value=@maze.SpaceColorString></td>
                    <td>@maze.GridString.Substring(0, 20)</td>
                    <td>
                        <MazeDeleteButton MazeId=@maze.Id OnClickCallback="@DeleteMaze" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IList<MazeModel> ModelList;

    private MazeContext getNewContext() {

        var connectionString = Configuration.GetConnectionString("SQLCONNSTR_nstsqldb_connstr");

        var contextOptions = new DbContextOptionsBuilder<MazeContext>()
            .UseSqlServer(connectionString)
            .Options;

        return new MazeContext(contextOptions);

    }

    protected override async Task OnInitializedAsync()
    {
        using (var context = getNewContext())
        {
            try {
                ModelList = await context.MazeModels.ToListAsync();

            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("ConsoleLog", ex.Message);
            }
            
        }

    }

    private async void DeleteMaze(int mazeId) {

        using (var context = getNewContext())
        {
            try {
                
                var MazeToDelete = await context.MazeModels.FindAsync(mazeId);

                if (MazeToDelete != null)
                {
                    context.MazeModels.Remove(MazeToDelete);
                    await context.SaveChangesAsync();
                    ModelList = await context.MazeModels.ToListAsync();
                }

            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("ConsoleLog", ex.Message);
            }
            
        }

        StateHasChanged();
    }

}
